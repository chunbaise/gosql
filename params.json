{
  "name": "Gosql",
  "tagline": "golang mysql dml",
  "body": "# gosql 一个简单的MySql DML语句封装\r\n---\r\n### 列子\r\n### 创建连接,连接池配置,设置表名称和数据写入\r\n```Go\r\npackage main\r\n\r\nimport (\r\n    \"github.com/hfdend/gosql\"\r\n    \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n    // 建立连接\r\n    m := gosql.NewDbMysql(\"127.0.0.1\", 3306, \"root\", \"\", \"test\")\r\n    // 设置最大连接数\r\n    m.SetMaxOpenConns(30)\r\n    // SetMaxIdleConns sets the maximum number of connections in the idle\r\n    m.SetMaxIdleConns(10)\r\n    // 设置空闲连接池的生存时间\r\n    m.SetAutoCloseTime(100)\r\n    // 设置表名\r\n    m.SetTableName(\"user\")\r\n\r\n    // 数据插入\r\n    data := map[string]interface{} {\r\n        \"user\": \"张三\",\r\n        \"sex\": \"1\",\r\n        \"age\": 56,\r\n        \"hobbies\": \"乒乓球\",\r\n    }\r\n    id, e := m.Insert(data);\r\n    fmt.Println(e)\r\n    fmt.Println(id)\r\n    fmt.Println(m.LastSql)\r\n}\r\n```\r\n\r\n### 简单查询操作与查询结果数据转换\r\n```Go\r\ncondition := m.NewCondition()\r\ncondition.SetFilter(\"Id\", 3)\r\ncondition.SetFilter(\"sex\", 1)\r\ncondition.SetFilterEx(\"age\", \">\", 20)\r\n\r\n// sql: select * from `user` where `Id` = 3 and `sex` = 1 and `age` > 20\r\nr, e := m.SetCondition(condition).FindAll()\r\n\r\nfmt.Println(\"错误\", e)\r\nfmt.Println(\"查询结果\", r)\r\n// 将数据转换成map\r\nfmt.Println(\"数据转换成map\", r.Result())\r\n// 将数据Scan到结构体\r\ntype User struct {\r\n    User        string  `field:\"user\"`\r\n    Sex         string   `field:\"sex\"`\r\n    Age         string  `field:\"age\"`\r\n    Hobbies     string  `field:\"Hobbies\"`\r\n}\r\nvar userAry []User\r\nvar userAryPtr []*User\r\nr.Scan(&userAry)\r\nr.Scan(&userAryPtr)\r\nfmt.Println(\"数据转换成结构体\", userAry, userAryPtr)\r\n// 转换单个数据到结构体\r\nfor _, v := range r.ResultValue() {\r\n    var user User\r\n    v.Scan(&user)\r\n    fmt.Println(\"单个结构体转换\", user)\r\n}\r\n\r\n\r\nfmt.Println(\"执行的sql\", m.LastSql)\r\n```\r\n\r\n### OR查询,连表查询与分页查询\r\n```go\r\n// OR查询条件设置\r\nconditon1 := m.NewCondition()\r\nconditon2 := m.NewCondition()\r\ncondition := m.NewCondition()\r\nconditon1.SetFilter(\"id\", 1)\r\nconditon2.SetFilter(\"id\", 2)\r\ncondition.SetFilterOr(conditon1, conditon2)\r\n// sql: where id = 1 or id = 2\r\nm.SetCondition(condition)\r\n\r\n// 关联查询\r\nm.LeftJoin(\"user2\", \"user2.user_id = user.user_id\")\r\n\r\n// 分页\r\npager := m.NewPager()\r\n// 设置每页条数\r\npager.Limit = 20\r\n// 如果打开将使用子查询查询出总数\r\npager.IsSubqueries = false\r\n// 设置偏移量\r\npager.Offset = 5\r\n// 实现分页查询\r\nvalues, err := m.PagerFindAll(pager)\r\nfmt.Println(\"错误\", err)\r\nfmt.Println(\"总条数与分页情况\", pager)\r\nfmt.Println(\"当前页数的数据\", values)\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}